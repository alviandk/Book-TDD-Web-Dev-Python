[[pre-requisites]]
[preface]
Prerequisites and Assumptions
------------------------------

Here's an outline of what I'm assuming about you and what you already know,
as well as what software you'll need ready and installed on your computer.


Python 3 and Programming
~~~~~~~~~~~~~~~~~~~~~~

I've written the book with beginners in mind, but if you're new to programming,
I'm assuming that you've already learned the basics of Python. So if you
haven't already, do run through a Python beginner's tutorial or get an
introductory book like http://www.diveintopython.net/['Dive Into Python']  or
http://learnpythonthehardway.org/['Learn Python the Hard Way'], or, just for
fun, http://inventwithpython.com/['Invent Your Own Computer Games with
Python'], all of which are excellent introductions.

If you're an experienced programmer but new to Python, you should get along
just fine.  Python is joyously simple to understand.

I'm using 'Python 3' for this book. When I wrote it in 2013&ndash;14, Python 3 had
been around for several years, and the world was just about on the tipping
point at which it was the preferred choice.  You should be able to follow this
book on Mac, Windows, or Linux.  Detailed installation instructions for each OS
follow.

TIP: This book was tested against Python 3.3 and Python 3.4. If you're on
3.2 for any reason, you may find minor differences, so you're best off 
upgrading if you can.

I wouldn't recommend trying to use Python 2, as the differences are more 
substantial. You'll still be able to carry across all the lessons you learn
in this book if your next project happens to be in Python 2.  But spending
time figuring out whether the reason your program output looks different from
mine is because of Python 2, or because you made an actual mistake, won't be
time spent productively.

If you are thinking of using http://www.pythonanywhere.com[PythonAnywhere] (the
PaaS startup I work for), rather than a locally installed Python, you should go
and take a quick look at <<appendix1>> before you get started.

In any case, I expect you to have access to Python, to know how to launch
it from a command line (usually with the command *`python3`*), and to know how to
edit a Python file and run it.  Again, have a look at the three books I recommended
previously if you're in any doubt.

NOTE: If you already have Python 2 installed, and you're worried that
installing Python 3 will break it in some way, don't!  Python 3 and 2 can
coexist peacefully on the same system, and they each store their packages in
totally different locations.  You just need to make sure that you have one
command to launch Python 3 (`python3`), and another to launch Python 2
(usually, just `python`).  Similarly, when we install pip for Python 3, 
we just make sure that its command (usually `pip3`) is identifiably
different from the Python 2 pip.


How HTML Works
~~~~~~~~~~~~~~

I'm also assuming you have a basic grasp of how the web works--what HTML is,
what a POST request is, etc.  If you're not sure about those, you'll need to find
a basic HTML tutorial--there are a few at http://www.webplatform.org/.  If you can figure out how
to create an HTML page on your PC and look at it in your browser, and understand what a
form is and how it might work, then you're probably OK.


JavaScript
~~~~~~~~~~

There's a little bit of JavaScript in the second half of the book.  If you
don't know JavaScript, don't worry about it until then, and if you find 
yourself a little confused, I'll recommend a couple of guides at that point.


Required Software Installations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aside from Python, you'll need:

The Firefox web browser:: 
    A quick Google search will get you an installer
    for whichever platform you're on.  Selenium can actually drive any of the 
    major browsers, but Firefox is the easiest to use as an example because it's
    reliably cross-platform and, as a bonus, is less sold out to corporate
    interests.

The Git version control system:: 
    This is available for any platform, at http://git-scm.com/. 

The pip Python package management tool:: 
    This comes bundled with Python 3.4 (it didn't always used to, this is a big
    hooray).
    +
    To make sure we're using the Python3 version of pip, I'll always use `pip3`
    as the executable in my command-line examples.  Depending on your platform,
    it may be `pip-3.4` or `pip-3.3`. Have a look at the detailed notes for
    each operating system for more info.

NOTE: If you're stuck on Django 1.7 for whatever reason, you'll be able to 
    follow along just fine -- the differences as pertains to this tutorial
    are negligible.


.Windows Notes
*******************************************************************************
Windows users can sometimes feel a little neglected, since OS X and Linux make
it easy to forget there's a world outside the Unix paradigm.  Backslashes
as directory separators?  Drive letters?  What?   Still, it is absolutely
possible to follow along with this book on Windows.  Here are a few tips:

1. When you install Git for Windows, make sure you choose '"Run Git and included
Unix tools from the Windows command prompt"'. You'll then get access to 
a program called "Git Bash". Use this as your main command prompt and you'll
get all the useful GNU command-line tools like `ls`, `touch`, and `grep`, plus
forward-slash directory separators.

2. When you install Python 3, make sure you tick the option that says 
"add python.exe to Path" as in <<add-python-to-path>>, to make sure you can 
run Python from the command line.
+
[[add-python-to-path]]
.Add python to the system path from the installer
image::images/twdp_0001.png[Screenshot of python installer]

3. On Windows, Python 3's executable is called `python.exe`, which is exactly
the same as Python 2.  To avoid any confusion, create a symlink in the Git Bash
binaries folder, like this:
+
[subs="specialcharacters,quotes"]
----
*ln -s /c/Python34/python.exe /bin/python3.exe*
----
+
You may need to right-click Git-Bash and choose "Run as an administrator" for
that command to work.  Note also that the symlink will only work in Git Bash,
not in the regular DOS command prompt.

4. Python 3.4 comes with pip, the package management tool.  You can check
it's installed by doing a `which pip3` from a command line, and it should
show you `/c/Python34/Scripts/pip3`.
+
If, for whatever reason, you're stuck with Python 3.3 and you don't have
`pip3`, check http://www.pip-installer.org/ 
for installation instructions. At the time of writing, this involved
downloading a file and then executing it with `python3 get-pip.py`. 
'Make sure you use `python3` when you run the setup script'.

TIP: The test for all this is that you should be able to go to a Git-Bash
command prompt and just run `python3` or `pip3` from any folder.

*******************************************************************************


.MacOS Notes
*******************************************************************************
MacOS is a bit more sane than Windows, although getting `pip3` installed was
still fairly challenging up until recently. With the arrival of 3.4, things are
now quite straightforward:

* Python 3.4 should install without a fuss from its http://www.python.org[downloadable installer].  It will automatically install pip, too.

* Git's installer should also "just work".

Similarly to Windows, the test for all this is that you should be able to open
a terminal and just run `git`, `python3`, or `pip3` from anywhere.  If you run
into any trouble, the search terms "system path" and "command not found" should
provide good troubleshooting resources.

TIP: You might also want to check out http://brew.sh//[Homebrew].
It used to be the only reliable way of installing lots of Unixy tools
(including Python 3) on a Mac. Although the Python installer is now fine, you
may find it useful in future. It does require you to download all 1.1 GB of
Xcode, but that also gives you a C compiler, which is a useful side effect.

*******************************************************************************



[[git-default-editor]]
Git's Default Editor, and Other Basic Git Config
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

I'll provide step-by-step instructions for Git, but it may be a good idea to
get a bit of configuration done now.  For example, when you do your first
commit, by default 'vi' will pop up, at which point you may have no idea what
to do with it. Well, much as vi has two modes, you then have two choices. One
is to learn some minimal vi commands '(press the i key to go into insert mode,
type your text, press `<Esc>` to go back to normal mode, then write the file
and quit with `:wq<Enter>`)'. You'll then have joined the great fraternity of
people who know this ancient, revered text editor.

Or you can point-blank refuse to be involved in such a ridiculous throwback to
the 1970s, and configure Git to use an editor of your choice. Quit vi using
`<Esc>` followed by `:q!`, then change your Git default editor. See the Git
documentation on http://git-scm.com/book/en/Customizing-Git-Git-Configuration[basic Git configuration].



Required Python Packages
^^^^^^^^^^^^^^^^^^^^^^^^

Once you have 'pip' installed, it's trivial to install new Python packages.
We'll install some as we go, but there are a couple we'll need right from
the beginning, so you should install them right away:

* 'Django', *`sudo pip3 install django==1.8`* (omit the `sudo` on 
Windows). This is our web framework. You should make sure you have version
1.8footnote:[I updated the book to Django 1.8 in Spring 2015, and as it's an
LTS, this will probably be the last upgrade for a while.  Make sure you install
this version, even if the Django project have released a newer one since.  You
can always jump to the bleeding edge when you go back to your own projects!]
installed and that you can access the `django-admin.py` executable from a
command line.  The https://docs.djangoproject.com/en/1.8/intro/install/[Django
documentation] has some installation instructions if you need help.

* 'Selenium', *`sudo pip3 install --upgrade selenium`* (omit the `sudo` on 
Windows), a browser automation tool
that we'll use to drive what are called functional tests. Make
sure you have the absolute latest version installed.  Selenium is engaged in a
permanent arms race with the major browsers, trying to keep up with the latest
features. If you ever find Selenium misbehaving for some reason, the answer is
often that it's a new version of Firefox and you need to upgrade to the latest
Selenium ...

NOTE: Unless you're absolutely sure you know what you're doing, 'don't' 
use a `virtualenv`. We'll start using one later in the book, in
<<deployment-chapter>>.


.A Note on IDEs
*******************************************************************************
If you've come from the world of Java or .NET, you may be keen to use an IDE
for your Python coding.  They have all sorts of useful tools, including VCS
integration, and there are some excellent ones out there for Python.  I used
one myself when I was starting out, and I found it very useful for my first 
couple of projects.

Can I suggest (and it's only a suggestion) that you 'don't' use an IDE, at
least for the duration of this tutorial? IDEs are much less necessary in the
Python world, and I've written this whole book with the assumption that you're
just using a basic text editor and a command line.  Sometimes, that's all you
have--when you're working on a server for example--so it's always worth
learning how to use the basic tools first and understanding how they work.
It'll be something you always have, even if you decide to go back to your IDE
and all its helpful tools, after you've finished this book.
*******************************************************************************


NOTE: Did these instructions not work for you? Or have you got better ones? Get
in touch: obeythetestinggoat@gmail.com!

